import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
    if (!body.message) {
      return NextResponse.json({ error: 'Invalid message format' }, { status: 400 })
    }

    const { message } = body
    const { from, text, chat } = message

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text === '/start') {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fiveka Shop!

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${process.env.NEXTAUTH_URL || 'http://localhost:3000'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
      `.trim()

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram Bot API
      console.log('Welcome message for user:', from.id)
      
      return NextResponse.json({ success: true, message: 'Welcome message sent' })
    }

    if (text === '/help') {
      const helpMessage = `
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
/status - –°—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞
      `.trim()

      console.log('Help message for user:', from.id)
      
      return NextResponse.json({ success: true, message: 'Help message sent' })
    }

    if (text === '/shop') {
      const shopUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}?tg_user_id=${from.id}`
      
      const shopMessage = `
üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:

${shopUrl}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω.
      `.trim()

      console.log('Shop link sent to user:', from.id)
      
      return NextResponse.json({ success: true, message: 'Shop link sent' })
    }

    if (text === '/status') {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞
      const shopStatus = await prisma.shopStatus.findFirst()
      const isOpen = shopStatus?.isOpen || false
      
      const statusMessage = `
üè™ –°—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞:

${isOpen ? 'üü¢ –û—Ç–∫—Ä—ã—Ç' : 'üî¥ –ó–∞–∫—Ä—ã—Ç'}

${isOpen ? '–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!' : '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}
      `.trim()

      console.log('Status message sent to user:', from.id)
      
      return NextResponse.json({ success: true, message: 'Status message sent' })
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    const unknownMessage = `
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    `.trim()

    console.log('Unknown command from user:', from.id, text)
    
    return NextResponse.json({ success: true, message: 'Unknown command handled' })

  } catch (error) {
    console.error('Telegram webhook error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({ message: 'Telegram webhook endpoint' })
}
